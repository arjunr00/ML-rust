var searchIndex = JSON.parse('{\
"ml_rust_cuda":{"doc":"","i":[[0,"math","ml_rust_cuda","",null,null],[5,"f32_eq","ml_rust_cuda::math","",null,[[]]],[0,"linear","","",null,null],[3,"Matrix","ml_rust_cuda::math::linear","A representation of a 32-bit float matrix.",null,null],[3,"Vector","","A representation of a 32-bit float mathematical vector.",null,null],[11,"new","","Returns a matrix representation from a supplied…",0,[[["vec",3],["vec",3]]]],[11,"from_flat","","Returns a matrix representation from a flat 1-dimensional…",0,[[["vec",3]]]],[11,"zero","","Returns a matrix of specified dimensions filled with zeros.",0,[[]]],[11,"get","","Returns the element of the matrix at a given position, or…",0,[[],["option",4]]],[11,"set","","Replaces the element of the matrix at a given position…",0,[[]]],[11,"elements","","Returns a reference to the matrix\'s internal flat element…",0,[[],["vec",3]]],[11,"dims","","Returns a reference to the matrix\'s dimension tuple in the…",0,[[]]],[11,"zero_padded","","Returns a copy of the matrix padded with zeros such that…",0,[[]]],[11,"truncated","","Returns a copy of the matrix truncated such that the…",0,[[]]],[11,"transposed","","Returns a transposed copy of the matrix.",0,[[]]],[11,"new","","Returns a mathematical vector representation from a…",1,[[["vec",3]]]],[11,"from_matrix","","Returns a mathematical vector around a given [Matrix].",1,[[["matrix",3]]]],[11,"zero","","Returns a mathematical vector of specified dimension…",1,[[]]],[11,"get","","Returns the element of the vector at a given position, or…",1,[[],["option",4]]],[11,"set","","Replaces the element of the vector at a given position…",1,[[]]],[11,"matrix","","Returns a reference to the interal matrix ofthe vector.",1,[[],["matrix",3]]],[11,"dim","","Returns the dimension of the vector.",1,[[]]],[11,"dot","","Returns the dot product of the vector with another vector.",1,[[]]],[11,"p_norm","","Returns the p-norm of the vector.",1,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"clone","","",0,[[],["matrix",3]]],[11,"clone","","",1,[[],["vector",3]]],[11,"eq","","Uses a CUDA kernel under the hood.",0,[[]]],[11,"eq","","See [Matrix].",1,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]]],"p":[[3,"Matrix"],[3,"Vector"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);